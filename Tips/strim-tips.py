import pandas as pd
import streamlit as st

st.set_page_config(layout='wide')

st.write(
    """
# Анализ DataSet **"Tips"** для создания портрета гостя кофейного заведения.

    """
)

tips = pd.read_csv('https://raw.githubusercontent.com/mwaskom/seaborn-data/master/tips.csv')

# GPT-Симмулятор для создания портрета гостя
with st.sidebar:

    st.subheader(':rainbow[Create a Portrait of the Guest]')
    st.info('Для удобства создания запросов Вы можете увеличить боковую панель, перетащив правую границу панели до нужного размера!')

    st.warning('Чтобы получить ответ, обязательно сделайте следующий запрос, как указано в справке!')

    text_input_1 = st.text_input('Введите запрос для GPT-Симмулятора:', placeholder='Введи сюда правильный запрос',
                                         help='Напиши: "Создай портрет гостя на основе тезисов, которые мы выявили за счет исследования"')

    if text_input_1 == 'Создай портрет гостя на основе тезисов, которые мы выявили за счет исследования':
        st.text("""
        Наилучшие условия времени и портрет клиента,
        который сможет принести данному кафе 
        наибольший доход, можно определить, 
        учитывая данные тезисы:
        
        1. Время посещения: 
        Evening/Dinner (вечер/ужин) - это период,
        когда средний чек выше всего (20.8$). 
        Поэтому кафе должно активно привлекать 
        клиентов именно в этот период.
        
        2. Портрет клиента:
        Пол: Мужчины, так как они в среднем 
        тратят больше (20.74$) по сравнению
        с женщинами (18.06$).
        Предпочтение курения: Предполагаем,
        что мужчины чаще имеют привычку курить, 
        что потенциально увеличивает средний чек. 
        
        Поэтому кафе может организовать
        отдельные зоны для курящих и
        предложить соответствующие условия.
        Следовательно, наилучшие условия
        для увеличения дохода в данном кафе
        будут вечерний период, а целевая аудитория
        в основном мужчины, предпочитающие курить.
         
        Рекламные акции и специальные предложения
        могут быть направлены на эту целевую аудиторию, 
        чтобы привлечь больше клиентов и
        повысить средний чек.   
        """)

        st.warning('Не отклоняйтесь от полученных примеров - это приведет к возникновению ошибок в работе сервиса.')
        text_input_2 = st.text_input('Попросите GPT-Симмулятор придумать рекламные акции под наши задачаи', \
                                             help='Напишите: "Тогда создай пример специальных акций и предложений"', placeholder='Введи сюда правильный запрос')

        if text_input_2 == "Тогда создай пример специальных акций и предложений":
            st.text(
                """
                Вот примеры рекламных акций, 
                направленные на мужчин, предпочитающих
                курить, для увеличения среднего чека:
                
                1. Специальные курительные зоны
                2. Курительные комплексы
                3. Широкий ассортимент табачных товаров
                4. Специальные комбо-предложения
                5. Программа лояльности для курящих гостей
                6. Тематические вечера для курящих
                
                """
            )
        else:
            st.error('Ячейка пустая или вы ввели не соответствующий текст для примера. Обратитесь к справочнику строки, чтобы получить правильные рекомендации запроса.')

    else:
        st.error('Ячейка пустая или вы ввели не соответствующий текст для примера. Обратитесь к справочнику строки, чтобы получить правильные рекомендации запроса.')



# Как влияет привычка курения гостя на средний чек гостя
st.subheader('1. Влияние привычки курения гостя на общий счет.', divider='blue')
smoker_variable = pd.DataFrame(
    {
        'Yes': tips[tips['smoker'] == 'Yes']['total_bill'].dropna().reset_index(drop=True),
        'No': tips[tips['smoker'] == 'No']['total_bill'].dropna().reset_index(drop=True)
    }
)

mean_smoker = tips.groupby('smoker', as_index=False)['total_bill'].mean()

st.line_chart(smoker_variable, color=["#0000FF", "#FF0000"])
st.info(f'Средний чек гостя, который: \n'
        f'- Курит: {round(smoker_variable["Yes"].mean(), 2)}$ \n'
        f'- Не курит: {round(smoker_variable["No"].mean(), 2)}$')



# В какой период дня (Lunch/Dinner) кафе получает наибольший доход
st.subheader('2. В какой части рабочего дня кафе получает наибольший доход?', divider='blue')

part_day = pd.DataFrame({
    'Lunch': tips[tips['time'] == 'Lunch']['total_bill'].dropna().reset_index(drop=True),
    'Dinner': tips[tips['time'] == 'Dinner']['total_bill'].dropna().reset_index(drop=True),
})

st.line_chart(part_day, color=["#0000FF", "#FF0000"])
st.info(f'Средняя цена чека в: \n'
        f'- Обед: {round(part_day["Lunch"].mean(), 2)}$ \n'
        f'- Ужин: {round(part_day["Dinner"].dropna().mean(), 2)}$'
        )

# Гендреное различие и величина чека
st.subheader('3. Кто больше тратит денег в кафе, учитывая гендерное различие?', divider='blue')

gender_diff = pd.DataFrame(
    {
        'Male': tips[tips['sex'] == 'Male']['total_bill'].dropna().reset_index(drop=True),
        'Female': tips[tips['sex'] == 'Female']['total_bill'].dropna().reset_index(drop=True)
    }
)

st.line_chart(gender_diff, color=["#FF1493", "#0000FF"])
st.info(f'В среднем: \n'
        f'- Мужчины тратят: {round(gender_diff["Male"].mean(), 2)}$ \n'
        f'- Женщины тратят: {round(gender_diff["Female"].mean(), 2)}$')
